# -*- coding: utf-8 -*-
"""regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j0y8zJRhY291moePvDuDSSX-Ac2VLPNj

# Regressão

A documentação necessário das ferramentas usadas podem ser vistitadas em:

- [LinearRegression](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html)
- [Train_test_split](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html)
- [Metrics](https://scikit-learn.org/stable/modules/classes.html#module-sklearn.metrics)

## Importar conjunto de dados
"""

import pandas as pd
dataframe = pd.read_csv('https://raw.githubusercontent.com/sullyvan15/datasets/master/weather.csv')

print(dataframe.shape)
print(dataframe.dtypes)
print(dataframe.describe())

"""## Relação entre dois atributos"""

import  matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split

dataframe.plot(x='MinTemp', y='MaxTemp', style='o')
plt.title("MinTemp vs MaxTemp")
plt.xlabel('MinTemp')
plt.ylabel('MaxTemp')
plt.show()

"""## Correlação entre todos atributos"""

import numpy as np
plt.figure(figsize=(12,10))

dataframe = dataframe.select_dtypes(exclude=['object'])

cor = dataframe.corr()

mask = np.zeros_like(cor, dtype=np.bool)
mask[np.triu_indices_from(mask)] = True

sns.heatmap(cor,
            annot=True,
            mask=mask,
            cmap=plt.cm.coolwarm,
            xticklabels=dataframe.columns,
            yticklabels=dataframe.columns,
            vmin=-1, vmax=1, center=0,
            square=True,
            linewidths=.5,
            cbar_kws={"shrink": .5})

plt.show()

"""## Distribuição de dados"""

plt.figure(figsize=(10, 6))
sns.distplot(dataframe['MaxTemp'])
# dataframe['MaxTemp'].plot.hist()
plt.show()

"""## Data splicing"""

X = dataframe[['MinTemp']]
y = dataframe['MaxTemp']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)

"""## Treinando o algoritmo"""

from sklearn.linear_model import LinearRegression

clf = LinearRegression()
clf.fit(X_train, y_train)

"""## Informações do Modelo"""

print('Intercept:', clf.intercept_)
print('Coefficient:', clf.coef_)

"""## Predição"""

y_pred = clf.predict(X_test)

df = pd.DataFrame({"Certo": y_test.values, "Predito": y_pred})

df.head(15).plot(kind='bar', figsize=(16,10))
plt.grid(which='major', linestyle='-', linewidth='0.5', color='black')
plt.show()

plt.scatter(X_test, y_test, color='gray')
plt.plot(X_test, y_pred, color='red', linewidth=2)
plt.show()

"""## Avaliação do Modelo"""

from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
    
print("Erro absoluto médio:", mean_absolute_error(y_test, y_pred))
print("Erro quadrático médio:", mean_squared_error(y_test, y_pred))
print("Raiz do erro quadrático médio:", np.sqrt(mean_squared_error(y_test, y_pred)))

