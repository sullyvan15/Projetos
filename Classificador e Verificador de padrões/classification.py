# -*- coding: utf-8 -*-
"""classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10WylJsQmeO92wNINVZCNtM6OoXvwHjoj

# Classificação

A documentação necessário das ferramentas usadas podem ser vistitadas em:

- [LogisticRegression](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html)
- [DecisionTreeClassifier](https://scikit-learn.org/stable/modules/tree.html#tree-classification)
- [RandomForestClassifier](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html)
- [KNeighborsClassifier](https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html)
- [GaussianNB](https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.GaussianNB.html)
- [SVM-SVC](https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html)
- [Train_test_split](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html)
- [Metrics](https://scikit-learn.org/stable/modules/classes.html#module-sklearn.metrics)

## Importar conjunto de dados
"""

import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd
pd.set_option('display.float_format', lambda x: '%.2f' % x)
np.set_printoptions(suppress=True)


dataframe = pd.read_csv('https://raw.githubusercontent.com/sullyvan15/datasets/master/wine-type.csv', sep=';')

print(dataframe.shape)
print(dataframe.dtypes)
print(dataframe.describe())

dataframe = dataframe.drop('Unnamed: 0', axis=1)

"""## Distribuição das classes"""

import  matplotlib.pyplot as plt
import seaborn as sns

print(dataframe['type'].unique())
print(dataframe.groupby('type').size())

sns.countplot(dataframe['type'], label='Tipo')
plt.show()

"""## Distribuição dos atributos"""

dataframe.drop('type', axis=1).plot(kind='box', subplots=True, layout=(3,4),
                                       sharex=False, figsize=(15,15), title='BoxPlot dos atributos')
plt.show()

"""## Histograma dos atributos"""

import pylab as pl
dataframe.drop('type', axis=1).hist(bins=30, figsize=(15,15))
pl.suptitle("Histograma para cada atributo de entrada")

"""## Normalização dos dados"""

from sklearn.preprocessing import MinMaxScaler

y = dataframe['type']
X = dataframe.drop('type', axis=1)

scaler = MinMaxScaler(feature_range=(0, 1))

X = scaler.fit_transform(X)

"""## Data splicing"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, random_state=42)

"""## Treinando o algoritmo
### Regressão Logística
"""

from sklearn.linear_model import LogisticRegression

clf_lr = LogisticRegression()
clf_lr.fit(X_train, y_train)

print("Acuracia no conjunto de treino: ", clf_lr.score(X_train, y_train))
print("Acuracia no conjunto de teste: ", clf_lr.score(X_test, y_test))

"""### Árvore de Decisão"""

from sklearn.tree import DecisionTreeClassifier

clf_dtc = DecisionTreeClassifier()
clf_dtc.fit(X_train, y_train)

print("Acuracia no conjunto de treino: ", clf_dtc.score(X_train, y_train))
print("Acuracia no conjunto de teste: ", clf_dtc.score(X_test, y_test))

"""### Floresta Aleátorias de Árvore de Decisão"""

from sklearn.ensemble import RandomForestClassifier

clf_rfc = RandomForestClassifier()
clf_rfc.fit(X_train, y_train)

print("Acuracia no conjunto de treino: ", clf_rfc.score(X_train, y_train))
print("Acuracia no conjunto de teste: ", clf_rfc.score(X_test, y_test))

"""### KNN"""

from sklearn.neighbors import KNeighborsClassifier

clf_knn = KNeighborsClassifier()
clf_knn.fit(X_train, y_train)

print("Acuracia no conjunto de treino: ", clf_knn.score(X_train, y_train))
print("Acuracia no conjunto de teste: ", clf_knn.score(X_test, y_test))

"""### Naive Bayes"""

from sklearn.naive_bayes import GaussianNB

clf_nb = GaussianNB()
clf_nb.fit(X_train, y_train)

print("Acuracia no conjunto de treino: ", clf_nb.score(X_train, y_train))
print("Acuracia no conjunto de teste: ", clf_nb.score(X_test, y_test))

"""### Support Vector Machine"""

from sklearn.svm import SVC

clf_svc = SVC()
clf_svc.fit(X_train, y_train)

print("Acuracia no conjunto de treino: ", clf_svc.score(X_train, y_train))
print("Acuracia no conjunto de teste: ", clf_svc.score(X_test, y_test))

"""## Avaliação do Modelo"""

import seaborn as sns
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix

y_pred = clf_rfc.predict(X_test)

print(classification_report(y_test, y_pred))

from sklearn.metrics import plot_confusion_matrix

plot_confusion_matrix(clf_rfc, X_test, y_test, normalize='all', cmap=plt.cm.Blues)

plot_confusion_matrix(clf_rfc, X_test, y_test, normalize=None, cmap=plt.cm.Blues, values_format='d')

